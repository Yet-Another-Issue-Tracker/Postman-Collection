{
	"info": {
		"_postman_id": "709fe9c0-87a3-4f9e-a868-dbcc7c6e3d32",
		"name": "E2E tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8007385"
	},
	"item": [
		{
			"name": "200 - Create project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Id is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"",
							"    pm.globals.set(\"projectId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('projectName', pm.randomString());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client\": \"paperino1\",\n    \"type\": \"scrum\",\n    \"name\": \"{{projectName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Get projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of projects is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.greaterThan(0)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
							"    if (!minValue) {",
							"        minValue = 20;",
							"        maxValue = 20;",
							"    }",
							"",
							"    if (!maxValue) {",
							"        maxValue = minValue;",
							"    }",
							"",
							"    let length = _.random(minValue, maxValue),",
							"        randomString = \"\";",
							"",
							"    for (let i = 0; i < length; i++)",
							"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
							"    return randomString;",
							"}",
							"",
							"pm.variables.set('projectName', randomString());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/projects",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Create sprint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('sprintNumber', pm.randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Id is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"",
							"    pm.globals.set(\"sprintId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"number\": \"{{sprintNumber}}\",\n    \"startDate\": \"2022-01-01T00:00:00.000Z\",\n    \"endDate\": \"2022-01-07T00:00:00.000Z\",\n    \"maxIssuePerSprint\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Complete the sprint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('sprintNumber', pm.randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/{{sprintId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"{{sprintId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "500 - Sprint id is not int",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('sprintNumber', pm.randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"ErrorMessage is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ErrorMessage).to.eql(\"Error parsing sprintId to uint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/wrongSprintId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"wrongSprintId"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 - Sprint id is not int Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('sprintNumber', pm.randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"ErrorMessage is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ErrorMessage).to.eql(\"Sprint with id \\\"99999\\\" does not exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/99999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Get list of sprints",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('sprintNumber', pm.randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of sprints is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.equal(1);",
							"});",
							"",
							"pm.test(\"List of sprints is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].completed).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"number\": \"{{sprintNumber}}\",\n    \"startDate\": \"2022-01-01T00:00:00.000Z\",\n    \"endDate\": \"2022-01-07T00:00:00.000Z\",\n    \"maxIssuePerSprint\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Create issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Id is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"",
							"    pm.globals.set(\"issueId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"issue-type\",\n    \"title\": \"issue-title\",\n    \"description\": \"issue-description\",\n    \"status\": \"issue-status\",\n    \"assignee\": \"issue-assignee\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/{{sprintId}}/issues",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"{{sprintId}}",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - Patch issue, change status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"Completed\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/{{sprintId}}/issues/{{issueId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"{{sprintId}}",
						"issues",
						"{{issueId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 - get list of issues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of sprints is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.equal(1);",
							"});",
							"",
							"pm.test(\"List of sprints is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].status).to.equal(\"Completed\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/projects/{{projectId}}/sprints/{{sprintId}}/issues",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"projects",
						"{{projectId}}",
						"sprints",
						"{{sprintId}}",
						"issues"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.randomString = (minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {",
					"    if (!minValue) {",
					"        minValue = 20;",
					"        maxValue = 20;",
					"    }",
					"",
					"    if (!maxValue) {",
					"        maxValue = minValue;",
					"    }",
					"",
					"    let length = _.random(minValue, maxValue),",
					"        randomString = \"\";",
					"",
					"    for (let i = 0; i < length; i++)",
					"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
					"    return randomString;",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}